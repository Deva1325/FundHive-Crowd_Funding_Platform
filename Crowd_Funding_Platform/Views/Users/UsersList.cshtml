@using X.PagedList
@using X.PagedList.Mvc.Core
@model IPagedList<Crowd_Funding_Platform.Models.User>
@{
    ViewData["Title"] = "Users List";
    Layout = "~/Views/Shared/_dashboardLayout.cshtml";
}

<style>
    .badge-true {
        background-color: #49cb50;
        color: white;
    }

    .badge-false {
        background-color: #dc3545;
        color: white;
    }

    .badge {
        font-size: 0.85rem;
        padding: 6px 12px;
        border-radius: 12px;
        color: white;
    }

    .filter-card {
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
        padding: 20px;
        margin-bottom: 25px;
    }

    .form-control, .form-select {
        height: 42px;
        font-size: 0.95rem;
    }

    .search-filter-group .col-md-2,
    .search-filter-group .col-md-3 {
        padding-right: 10px;
        padding-left: 10px;
    }

    .reset-btn {
        height: 42px;
        width: 100%;
        padding: 6px;
    }

   /*  .reset-btn {
        height: 34px;
        padding: 6px 12px;
    } */


    .table thead th {
        background-color: #f8f9fa;
        font-weight: bold;
        vertical-align: middle;
        text-align: center;
    }

    .table tbody td {
        vertical-align: middle;
        text-align: center;
    }

    .action-btns .btn {
        margin: 0 3px;
        padding: 6px 10px;
    }

    .action-btns i {
        font-size: 14px;
    }

    .header-title {
        font-size: 24px;
        font-weight: 600;
        color: #007bff;
    }

    .rounded-avatar {
        width: 45px;
        height: 45px;
        object-fit: cover;
        border-radius: 50%;
        border: 1px solid #ccc;
    }
</style>


<div class="export-buttons" style="margin-top: -16px; margin-right: 17px;">
    <a asp-action="ExportUsersToExcel"
       asp-route-searchTerm="@ViewBag.SearchTerm"
       asp-route-roleFilter="@ViewBag.RoleFilter"
       asp-route-monthFilter="@ViewBag.MonthFilter"
       class="btn btn-outline-success"
       data-bs-toggle="tooltip" data-bs-placement="top" title="Export to Excel"
       style="background-color: #1bcfb4; color: white;">
        <i class="fas fa-file-excel"></i>
    </a>

    <a href="@Url.Action("ExportUsersToPdf", "Users", new { searchTerm = ViewBag.SearchTerm, roleFilter = ViewBag.RoleFilter, monthFilter = ViewBag.MonthFilter })"
       class="btn btn-outline-danger"
       data-bs-toggle="tooltip" data-bs-placement="top" title="Export to PDF"
       style="background-color: #fe7c96; color: white;">
        <i class="fas fa-file-pdf"></i>
    </a>
</div>


<div class="container mt-4">
    <div class="card mb-4 p-4 filter-card">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2 class="text-primary m-0">👥 Users List</h2>
        </div>

        <div class="row search-filter-group align-items-end g-2">
            <div class="col-md-3">
                <input type="text" id="searchTerm" name="searchTerm" class="form-control" value="@ViewBag.SearchTerm" placeholder="🔍 Search by name" />
            </div>

            <div class="col-md-3">
                <select id="roleFilter" name="roleFilter" class="form-select">
                    <option value="">🎭 All Roles</option>
                    <option value="Creator" selected="@(ViewBag.RoleFilter == "Creator")">Creator</option>
                    <option value="Contributor" selected="@(ViewBag.RoleFilter == "Contributor")">Contributor</option>
                </select>
            </div>

            <div class="col-md-3">
                <select id="monthFilter" name="monthFilter" class="form-select">
                    <option value="">📅 All Months</option>
                    @{
                        for (int i = 1; i <= 12; i++)
                        {
                            var monthName = new DateTime(2000, i, 1).ToString("MMMM");
                            <option value="@i" selected="@(ViewBag.MonthFilter == i.ToString())">@monthName</option>
                        }
                    }
                </select>
            </div>

            <div class="col-md-2">
                <button type="button" class="btn btn-outline-danger reset-btn" onclick="resetFilters()">
                    <i class="fas fa-redo-alt"></i> Reset
                </button>
            </div>
        </div>
    </div>


    <div class="table-responsive rounded shadow-sm bg-white p-3">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Profile</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Email Verified</th>
                    @* <th>Is Admin</th> *@
                    <th>Creator Approved</th>
                    <th>Joined On</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody id="userTableBody">
                @foreach (var user in Model)
                {
                    var profilePic = string.IsNullOrEmpty(user.ProfilePicture)
                    ? Url.Content("~/images/default-user.png")
                    : user.ProfilePicture;

                    <tr>
                        <td><img src="@profilePic" alt="Profile" class="rounded-avatar" /></td>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>@user.PhoneNumber</td>
                        <td>
                            <span class="badge @(user.EmailVerified.GetValueOrDefault() ? "badge-true" : "badge-false")">
                                @(user.EmailVerified.GetValueOrDefault() ? "Yes" : "No")
                            </span>
                        </td>
                       @*  <td>
                            <span class="badge @(user.IsAdmin.GetValueOrDefault() ? "badge-true" : "badge-false")">
                                @(user.IsAdmin.GetValueOrDefault() ? "Yes" : "No")
                            </span>
                        </td> *@
                        <td>
                            <span class="badge @(user.IsCreatorApproved.GetValueOrDefault() ? "badge-true" : "badge-false")">
                                @(user.IsCreatorApproved.GetValueOrDefault() ? "Yes" : "No")
                            </span>
                        </td>
                        <td>@user.DateCreated?.ToString("dd-MM-yyyy")</td>
                        <td class="text-center action-btns">
                            <a asp-action="Details" asp-route-id="@user.UserId"
                               class="btn btn-outline-info btn-sm" title="View details">
                                <i class="fas fa-eye"></i>
                            </a>
                           @*  <a asp-action="Edit" asp-route-id="@user.UserId"
                               class="btn btn-outline-primary btn-sm" title="Edit user">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a asp-action="Delete" asp-route-id="@user.UserId"
                               class="btn btn-outline-danger btn-sm"
                               onclick="return confirm('Are you sure you want to delete this user?');"
                               title="Delete user">
                                <i class="fas fa-trash-alt"></i>
                            </a> *@
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-center mt-4" id="pagination" class="d-flex justify-content-center mt-4">
        @Html.PagedListPager(Model, page => Url.Action("UsersList", new
            {
                page,
                searchTerm = ViewBag.SearchTerm,
                roleFilter = ViewBag.RoleFilter,
                monthFilter = ViewBag.MonthFilter
            }), new PagedListRenderOptions
   {
       DisplayLinkToFirstPage = PagedListDisplayMode.Always,
       DisplayLinkToLastPage = PagedListDisplayMode.Always,
       DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
       DisplayLinkToNextPage = PagedListDisplayMode.Always,
       DisplayLinkToIndividualPages = true,
       MaximumPageNumbersToDisplay = 5,
       LiElementClasses = new[] { "page-item" },
       PageClasses = new[] { "page-link" }
   })
    </div>

</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

<script>
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    function resetFilters() {
        window.location.href = '@Url.Action("UsersList", "Users")';
    }

    $(document).ready(function () {
        function debounce(func, delay) {
            let timer;
            return function () {
                const context = this;
                const args = arguments;
                clearTimeout(timer);
                timer = setTimeout(() => func.apply(context, args), delay);
            };
        }

        function applyFilters() {
            const searchTerm = $("#searchTerm").val();
            const roleFilter = $("#roleFilter").val();
            const monthFilter = $("#monthFilter").val();

            const url = `/Users/UsersList?searchTerm=${encodeURIComponent(searchTerm)}&roleFilter=${encodeURIComponent(roleFilter)}&monthFilter=${monthFilter}`;
            window.location.href = url;
        }

        $("#searchTerm").on("input", debounce(applyFilters, 500));
        $("#roleFilter, #monthFilter").on("change", applyFilters);
    });
</script>
}


@* <script>
    function resetFilters() {
        $('#searchTerm').val('');
        $('#roleFilter').val('');
        $('#monthFilter').val('');
        loadUsers(1);
    }

    function debounce(func, delay) {
        let timer;
        return function () {
            clearTimeout(timer);
            timer = setTimeout(() => func(), delay);
        };
    }
    console.log("Sending AJAX with: ", { searchTerm, role, month, page });

    function loadUsers(page = 1) {
        const searchTerm = $('#searchTerm').val();
        const role = $('#roleFilter').val();
        const month = $('#monthFilter').val();

        $.ajax({
            url: '/Users/UsersList',
            type: 'GET',
            data: {
                searchTerm,
                roleFilter: role,
                monthFilter: month,
                page,
                isAjax: true
            },
            success: function (response) {
                const tbody = $('#userTableBody');
                const pagination = $('#pagination');
                tbody.empty();
                pagination.empty();

                if (!response.Users || response.Users.length === 0) {
                    tbody.append('<tr><td colspan="8" class="text-center text-muted">No users found.</td></tr>');
                    return;
                }

                response.Users.forEach(user => {
                    tbody.append(`
            <tr>
                <td><img src="${user.ProfilePicture}" alt="Profile" class="rounded-avatar" /></td>
                <td>${user.Username}</td>
                <td>${user.Email}</td>
                <td>${user.PhoneNumber}</td>
                <td>
                    <span class="badge ${user.EmailVerified ? 'badge-true' : 'badge-false'}">
                        ${user.EmailVerified ? 'Yes' : 'No'}
                    </span>
                </td>
                <td>
                    <span class="badge ${user.IsCreatorApproved ? 'badge-true' : 'badge-false'}">
                        ${user.IsCreatorApproved ? 'Yes' : 'No'}
                    </span>
                </td>
                <td>${user.DateCreated}</td>
                <td class="text-center action-btns">
                    <a href="/Users/Details/${user.UserId}" class="btn btn-outline-info btn-sm" title="View details">
                        <i class="fas fa-eye"></i>
                    </a>
                </td>
            </tr>
        `);
                });


                let paginationHtml = '<ul class="pagination">';
                for (let i = 1; i <= response.PageCount; i++) {
                    paginationHtml += `
                        <li class="page-item ${i === response.PageNumber ? 'active' : ''}">
                            <a class="page-link" href="#" onclick="loadUsers(${i}); return false;">${i}</a>
                        </li>`;
                }
                paginationHtml += '</ul>';
                pagination.append(paginationHtml);
            },

            error: function (xhr, status, error) {
                console.error("AJAX Error:", status, error);
                console.log(xhr.responseText);
            }
        });
    }

    // 🔁 Bind Filter Events
    $('#searchTerm').on('input', debounce(() => loadUsers(1), 500));
    $('#roleFilter, #monthFilter').on('change', () => loadUsers(1));

    // 🔃 Initial Load
    $(document).ready(() => {
        loadUsers();
    });

</script> *@


