@model Crowd_Funding_Platform.Models.Campaign

@{
    ViewData["Title"] = Model?.CampaignId > 0 ? "Edit Campaign" : "Create Campaign";
    Layout = "~/Views/Shared/_dashboardLayout.cshtml";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<style>
    #aiResult {
        display: flex;
        justify-content: center;
        margin-top: 10px;
    }

    .ai-card {
        background-color: #fdfdfd;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px 20px;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
        font-size: 14px;
        max-width: 732px;
        width: 100%;
    }

        .ai-card ul {
            padding-left: 0;
        }

        .ai-card li {
            padding: 6px 0;
            display: flex;
            align-items: flex-start;
        }

        .ai-card i {
            margin-right: 6px;
            font-size: 1rem;
            color: #0d6efd;
        }
</style>

<div class="container mt-5">
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <h3 class="text-center text-primary mb-4">@ViewData["Title"]</h3>

        <form id="campaignForm" enctype="multipart/form-data" method="post">
            <input type="hidden" asp-for="CampaignId" />   

         
            <!-- New AI Keyword Input -->
            <div class="form-group mb-3">
                <label for="AIKeyword" class="form-label fw-bold">🔮 Enter a keyword for AI suggestion</label>
                <input type="text" class="form-control" id="AIKeyword" placeholder="e.g., education, healthcare, environment">
            </div>

            @* <!-- Generate AI Button -->
            <div class="form-group mb-3">
                <button type="button" id="generateAi" class="btn btn-sm btn-primary">
                    <i class="bi bi-stars me-1"></i> Generate with AI
                </button>
            </div> *@

            <!-- Generate AI Section -->
            <div class="form-group mb-3 d-flex gap-2 align-items-center flex-wrap">
                <button type="button" id="generateAi" class="btn btn-sm btn-primary">
                    <i class="bi bi-stars me-1"></i> Generate with AI
                </button>

                <button type="button" id="regenerateAi" class="btn btn-sm btn-outline-secondary" style="display:none;">
                    <i class="bi bi-arrow-repeat me-1"></i> Regenerate
                </button>

                <div class="form-check ms-2">
                    <input class="form-check-input" type="checkbox" value="" id="autoFillCheckbox" checked>
                    @* <label class="form-check-label" for="autoFillCheckbox">
                        Auto-fill fields
                    </label> *@
                </div>
            </div>

            <!-- Previous/Next Navigation -->
            <div class="d-flex justify-content-end gap-2 mb-3" id="navigationButtons" style="display:none;">
                <button type="button" id="prevSuggestion" class="btn btn-outline-primary btn-sm">Previous</button>
                <button type="button" id="nextSuggestion" class="btn btn-outline-primary btn-sm">Next</button>
            </div>


            <!-- AI Loader & Result -->
            <div id="aiLoader" class="text-info mt-2" style="display:none;">Generating with AI...</div>
            <div id="aiResult" class="mt-3"></div>


            <div class="row">
                <!-- Left Column -->
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="Title" class="form-label fw-bold">Campaign Title</label>
                        <input asp-for="Title" class="form-control" placeholder="Enter campaign title" id="Title" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>                

                    <div class="form-group mb-3">
                        <label asp-for="Requirement" class="form-label fw-bold">Goal Amount ($)</label>
                        <input asp-for="Requirement" type="number" step="0.01" class="form-control" placeholder="Enter goal amount" />
                        <span asp-validation-for="Requirement" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="StartDate" class="form-label fw-bold">Start Date</label>
                        <input asp-for="StartDate" type="date" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        <span asp-validation-for="StartDate" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="EndDate" class="form-label fw-bold">End Date</label>
                        <input asp-for="EndDate" type="date" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        <span asp-validation-for="EndDate" class="text-danger"></span>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="CategoryId" class="form-label fw-bold">Category</label>
                        <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.Categories" id="CategoryId">
                            <option value="">Select Category</option>
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>

                    <!-- Thumbnail Image -->
                    <div class="form-group mb-3">
                        <label for="MediaUrl" class="form-label fw-bold">Main Thumbnail Image</label>
                        <input type="file" name="ImageFile" class="form-control" accept="image/*" onchange="previewImage(event)" />
                        <img id="existingImage" src="@Model.MediaUrl" class="mt-2" style="max-width: 200px; display: @(string.IsNullOrEmpty(Model.MediaUrl) ? "none" : "block")" />
                    </div>
                 
                    <!-- ✅ Hidden input to send files to server -->
                    <input type="file" id="GalleryImagesInput" name="GalleryImages" multiple hidden />

                    <div class="form-group mb-3">
                        <label for="GalleryImages" class="form-label fw-bold">Attachments (Images, PDFs, Docs)</label>
                        <input type="file" id="GalleryImages" name="GalleryImages" multiple accept="image/*,application/pdf" class="form-control" onchange="handleGallerySelection(event)" />
                        <div id="galleryPreview" class="d-flex flex-wrap gap-2 mt-2"></div>
                    </div>
    
                    <div class="form-group mb-3">
                        <label asp-for="Description" class="form-label fw-bold">Description</label>
                        <textarea asp-for="Description" class="form-control" rows="4" placeholder="Describe your campaign" id="Description"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="text-center mt-4">
                <button type="submit" class="btn btn-primary btn-lg px-4">
                    <i class="fas fa-save me-2"></i>
                    @((Model?.CampaignId ?? 0) > 0 ? "Edit Campaign" : "Create Campaign")
                </button>
            </div>

        </form>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="~/js/SaveCampaignForm.js"></script>


    <script>
        let suggestions = [];
        let currentIndex = 0;

        function showSuggestion(index) {
            const suggestion = suggestions[index];
            if (!suggestion) return;

            const suggestionHtml = `
                            <div class="ai-card w-100 p-3 border rounded shadow-sm" style="margin-top: -49px;margin-left: -207px;margin-bottom: 34px;">
                                <h5><i class="bi bi-stars me-2 text-primary"></i> ${suggestion.title}</h5>
                                <p class="mb-2"><strong>Description:</strong> ${suggestion.description}</p>
                                <p class="mb-3"><strong>Category:</strong> ${suggestion.category}</p>
                        <div class="d-flex justify-content-between">
                            <span class="text-success fw-bold">✅ AI Suggestion Ready.</span>
                            <button type="button" class="btn btn-success btn-sm useSuggestionBtn">Use This</button>
                        </div>
                    </div>
                `;
            $('#aiResult').html(suggestionHtml).show();
            $('#navigationButtons').show();
        }

        function fillFormFields(suggestion) {
            $('#Title').val(suggestion.title);
            $('#Description').val(suggestion.description);

            const categoryDropdown = $('#CategoryId');
            const matchedOption = categoryDropdown.find('option').filter(function () {
                return $(this).text().trim().toLowerCase() === suggestion.category.toLowerCase();
            });

            if (matchedOption.length > 0) {
                matchedOption.prop('selected', true);
            } 
            // else {
            //     Swal.fire({
            //         icon: 'info',
            //         title: 'Category not found',
            //         text: 'AI suggested a category that is not in your list. Please select manually.'
            //     });
            // }
        }

        function generateAI(keyword) {
            const button = $('#generateAi');
            const originalButtonText = button.html();

            button.prop('disabled', true).html('<span class="spinner-border spinner-border-sm me-2"></span>Generating...');
            $('#aiLoader').show();
            $('#aiResult').hide().empty();

            $.ajax({
                type: "POST",
                url: "/ManageCampaigns/GenerateAiTitle",
                data: { category: keyword },
                success: function (response) {
                    $('#aiLoader').hide();
                    $('#regenerateAi').show();

                    // ✅ Use the response directly without parsing unless it's a string
                    let parsedResponse = response;

                    if (typeof response === 'string') {
                        try {
                            parsedResponse = JSON.parse(response);
                        } catch (e) {
                            console.error("Parsing error:", e);
                            Swal.fire('Error', 'AI response was not valid JSON.', 'error');
                            return;
                        }
                    }

                    if (parsedResponse.success) {
                        const suggestion = {
                            title: parsedResponse.title,
                            description: parsedResponse.description,
                            category: parsedResponse.category
                        };

                        suggestions.push(suggestion);
                        currentIndex = suggestions.length - 1;
                        showSuggestion(currentIndex);

                        if ($('#autoFillCheckbox').is(':checked')) {
                            fillFormFields(suggestion);
                        }

                    } else {
                        Swal.fire('Error', parsedResponse.message || 'AI generation failed.', 'error');
                    }
                },
                error: function (xhr, status, error) {
                    $('#aiLoader').hide();
                    console.error("Error:", status, error);
                    Swal.fire('Error', 'Error during AI generation.', 'error');
                },
                complete: function () {
                    button.prop('disabled', false).html(originalButtonText);
                }
            });
        }

        $(document).ready(function () {
            $('#generateAi').on('click', function () {
                const keyword = $('#AIKeyword').val().trim();
                if (!keyword) {
                    Swal.fire('Warning', 'Please enter a keyword to generate.', 'warning');
                    return;
                }
                suggestions = [];
                currentIndex = 0;
                generateAI(keyword);
            });

            $('#regenerateAi').on('click', function () {
                const keyword = $('#AIKeyword').val().trim();
                if (!keyword) {
                    Swal.fire('Warning', 'Please enter a keyword.', 'warning');
                    return;
                }
                generateAI(keyword);
            });

            $('#prevSuggestion').on('click', function () {
                if (currentIndex > 0) {
                    currentIndex--;
                    showSuggestion(currentIndex);
                }
            });

            $('#nextSuggestion').on('click', function () {
                if (currentIndex < suggestions.length - 1) {
                    currentIndex++;
                    showSuggestion(currentIndex);
                }
            });

            $(document).on('click', '.useSuggestionBtn', function () {
                const suggestion = suggestions[currentIndex];
                fillFormFields(suggestion);
                Swal.fire('Success', 'Fields filled with selected AI suggestion.', 'success');
            });
        });
    </script>


    <script>
       



        // $('#generateAi').on('click', function () {
        //     const button = $(this);
        //     const originalButtonText = button.html();

        //     button.prop('disabled', true).html('<span class="spinner-border spinner-border-sm me-2"></span>Generating...');

        //     const keyword = $('#AIKeyword').val().trim();
        //     if (!keyword) {
        //         alert("Please enter a keyword to generate with AI.");
        //         button.prop('disabled', false).html(originalButtonText);
        //         return;
        //     }

        //     $('#aiLoader').show();
        //     $('#aiResult').hide().empty();

        //     $.ajax({
        //         type: "POST",
        //         url: "/ManageCampaigns/GenerateAiTitle",
        //         data: { keyword: keyword },
        //         success: function (response) {
        //             $('#aiLoader').hide();

        //             let parsedResponse;
        //             try {
        //                 if (typeof response === 'string') {
        //                     parsedResponse = JSON.parse(response); // 🔥 Fix: Safely parse if response is string
        //                 } else {
        //                     parsedResponse = response; // already JSON
        //                 }
        //             } catch (e) {
        //                 console.error("Parsing error:", e);
        //                 $('#aiResult').text("AI generation failed: Failed to parse AI JSON response.").show();
        //                 return;
        //             }

        //             if (parsedResponse.success) {
        //                 $('#Title').val(parsedResponse.title);
        //                 $('#Description').val(parsedResponse.description);

        //                 const categoryDropdown = $('#CategoryId');
        //                 const matchedOption = categoryDropdown.find('option').filter(function () {
        //                     return $(this).text().trim().toLowerCase() === parsedResponse.category.toLowerCase();
        //                 });

        //                 if (matchedOption.length > 0) {
        //                     matchedOption.prop('selected', true);
        //                 } else {
        //                     alert("Category suggested by AI not found in the list. Please select manually.");
        //                 }

        //                 const suggestionHtml = `
        //                     <div class="ai-card w-100 p-3 border rounded shadow-sm">
        //                         <h5><i class="bi bi-stars me-2 text-primary"></i> ${parsedResponse.title}</h5>
        //                         <p class="mb-2"><strong>Description:</strong> ${parsedResponse.description}</p>
        //                         <p class="mb-3"><strong>Category:</strong> ${parsedResponse.category}</p>
        //                         <div class="text-success fw-bold">✅ Fields pre-filled automatically.</div>
        //                     </div>
        //                 `;

        //                 $('#aiResult').html(suggestionHtml).show();
        //             } else {
        //                 $('#aiResult').text(parsedResponse.message || "AI generation failed.").show();
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             $('#aiLoader').hide();
        //             console.error("Error:", status, error);
        //             $('#aiResult').text("Error during AI generation.").show();
        //         },
        //         complete: function () {
        //             button.prop('disabled', false).html(originalButtonText);
        //         }
        //     });
        // });

    </script>


    <script>
        function previewImage(event) {
            const input = event.target;
            const preview = document.getElementById('existingImage');
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = e => {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

            let selectedFiles = [];

        function handleGallerySelection(event) {
            const newFiles = Array.from(event.target.files);

            // Prevent duplicates
            newFiles.forEach(file => {
                if (!selectedFiles.some(f => f.name === file.name && f.size === file.size)) {
                    selectedFiles.push(file);
                }
            });

            // Bind selectedFiles to the hidden input so they are sent on submit
            const realInput = document.getElementById("GalleryImagesInput");
            const dataTransfer = new DataTransfer();
            selectedFiles.forEach(f => dataTransfer.items.add(f));
            realInput.files = dataTransfer.files;

            renderGalleryPreview();
        }

        function renderGalleryPreview() {
            const previewDiv = document.getElementById("galleryPreview");
            previewDiv.innerHTML = "";

            selectedFiles.forEach((file, index) => {
                const wrapper = document.createElement("div");
                wrapper.className = "position-relative m-1";
                wrapper.style.display = "inline-block";

                const isImage = file.type.startsWith("image/");
                const previewElement = isImage ? document.createElement("img") : document.createElement("div");

                previewElement.className = "border rounded";
                previewElement.style.width = "100px";
                previewElement.style.height = "100px";
                previewElement.style.objectFit = "cover";

                if (isImage) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        previewElement.src = e.target.result;
                    };
                    reader.readAsDataURL(file);
                } else {
                    previewElement.textContent = file.name;
                    previewElement.style.display = "flex";
                    previewElement.style.alignItems = "center";
                    previewElement.style.justifyContent = "center";
                    previewElement.style.background = "#f0f0f0";
                    previewElement.style.fontSize = "12px";
                }

                const removeBtn = document.createElement("button");
                removeBtn.type = "button";
                removeBtn.innerHTML = "&times;";
                removeBtn.className = "btn btn-danger btn-sm position-absolute top-0 end-0";
                removeBtn.onclick = () => {
                    selectedFiles.splice(index, 1);
                    const dataTransfer = new DataTransfer();
                    selectedFiles.forEach(f => dataTransfer.items.add(f));
                    document.getElementById("GalleryImagesInput").files = dataTransfer.files;
                    renderGalleryPreview();
                };

                wrapper.appendChild(previewElement);
                wrapper.appendChild(removeBtn);
                previewDiv.appendChild(wrapper);
            });
        }

        // if (!category || !requirement) {
        //     alert('Please select a category and enter the requirement.');
        //     return;
        // }
    </script>
    }

















@* @model Crowd_Funding_Platform.Models.Campaign
@{
    ViewData["Title"] = Model?.CampaignId > 0 ? "Edit Campaign" : "Create Campaign";

    // bool isEditMode = Model.CampaignId > 0;  // Check if it's edit mode
    Layout = "~/Views/Shared/_dashboardLayout.cshtml";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">

<link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600&display=swap" rel="stylesheet">

<div class="container mt-5">
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <h3 class="text-center text-primary mb-4">@ViewData["Title"]</h3>

        <form id="campaignForm" enctype="multipart/form-data" method="post">
            <input type="hidden" asp-for="CampaignId" />

            <div class="row">
                <!-- Left Column -->
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="Title" class="form-label fw-bold">Campaign Title</label>
                        <input asp-for="Title" class="form-control" placeholder="Enter campaign title"  />
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="Requirement" class="form-label fw-bold">Goal Amount ($)</label>
                        <input asp-for="Requirement" type="number" step="0.01" class="form-control" placeholder="Enter goal amount"  />
                    </div>                
                    
                    <div class="form-group mb-3">
                        <label asp-for="StartDate" class="form-label fw-bold">Start Date</label>
                        <input asp-for="StartDate" type="date" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" id="StartDate" />
                    </div>
                    
                    <div class="form-group mb-3">
                        <label asp-for="EndDate" class="form-label fw-bold">End Date</label>
                        <input asp-for="EndDate" type="date" class="form-control"  min="@DateTime.Today.ToString("yyyy-MM-dd")" id="EndDate" />
                    </div>
                </div>

                <!-- Right Column -->
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="CategoryId" class="form-label fw-bold">Category</label>
                        <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.Categories">
                            <option value="">Select Category</option>
                        </select>
                    </div>
                   
                   

                   <div class="form-group">
                        <label for="Image">Campaign Image</label>
                        <input type="file" id="MediaFile" name="ImageFile" class="form-control" accept="image/*" onchange="previewImage(event)" />

                        @if (!string.IsNullOrEmpty(Model?.MediaUrl))
                        {
                            <img id="existingImage" src="@Model.MediaUrl" alt="Campaign Image" class="mt-2" style="max-width: 200px; display: block;" />
                        }
                        else
                        {
                            <img id="existingImage" src="@Model.MediaUrl" alt="Preview Image" class="mt-2" style="max-width: 200px; display: none;" />
                        }
                    </div>  

                    <div class="form-group mb-3">
                        <label asp-for="Description" class="form-label fw-bold">Description</label>
                        <textarea asp-for="Description" class="form-control" rows="4" placeholder="Describe your campaign"></textarea>
                    </div>
                </div>
            </div>

            <div class="text-center mt-4">
                <button type="submit" class="btn btn-primary btn-lg px-4">
                    <i class="fas fa-save me-2"></i> @((Model?.CampaignId ?? 0) > 0 ? "Edit Campaign" : "Create Campaign")
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}

    <!-- ✅ Toastr and jQuery Validation Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <!-- Toastr CSS -->

    <!-- Toastr JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="~/js/SaveCampaignForm.js"></script>


     <script>
        function previewImage(event) {
            const input = event.target;
            const preview = document.getElementById('existingImage');

            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = e => {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        function previewGallery(event) {
            const previewDiv = document.getElementById("galleryPreview");
            previewDiv.innerHTML = ""; // Clear old preview
            const files = event.target.files;

            for (const file of files) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "rounded";
                    img.style.maxWidth = "100px";
                    img.style.maxHeight = "100px";
                    img.style.marginRight = "10px";
                    previewDiv.appendChild(img);
                };
                reader.readAsDataURL(file);
            }
        }
    </script>
}

 *@
