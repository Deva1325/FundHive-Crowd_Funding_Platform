@model Crowd_Funding_Platform.Models.Campaign

@{
    ViewData["Title"] = "Campaign Details";
    Layout = "~/Views/Shared/_LandingPageLayout.cshtml";
}

@* <link rel="stylesheet" type="text/css" href="~/Authentication_T/aapp-assets/vendors/css/extensions/sweetalert2.min.css"> *@


<div id="loaderOverlay" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(255,255,255,0.8); z-index:9999; text-align:center;">
    <img src="~/Spinner.gif" alt="Loading..." style="margin-top:20%;">
</div>

<div class="container my-5">
    <div class="row">
        <div class="col-md-8">
            <div class="card shadow-lg">
                <div class="card-body">
                    <h2 class="fw-bold">@Model.Title</h2>
                    <div class="text-center">
                        <img src="@Model.MediaUrl" alt="Campaign Image" class="img-fluid rounded shadow" style="max-height: 400px; object-fit: cover;">
                    </div>
                    <hr />
                    <div class="d-flex align-items-center">
                        <div class="progress w-50" style="height: 20px;">
                            @{
                                var progressPercentage = Model.Requirement > 0 ? (Model.RaisedAmount / Model.Requirement) * 100 : 0;
                            }
                            <div class="progress-bar bg-success" role="progressbar" style="width: @progressPercentage%;" aria-valuenow="@progressPercentage" aria-valuemin="0" aria-valuemax="100">
                                @((progressPercentage?.ToString("0") ?? "0") + "%")
                            </div>
                        </div>
                        <span class="ms-3 fw-bold">
                            @((progressPercentage?.ToString("0") ?? "0") + "% Raised")
                        </span>
                    </div>
                    <p class="mt-2"><strong>₹@Model.RaisedAmount</strong> of ₹@Model.Requirement</p>
                    <hr />
                    <p class="lead">@Model.Description</p>
                    <p class="fw-bold">Created by: @Model.Creator.FirstName</p>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="position-sticky" style="top: 20px;">
                <div class="card shadow-lg p-3">
                    <h4 class="text-center fw-bold">Donate</h4>
                    <div class="text-center mt-3">
                        @* <button class="btn btn-danger btn-lg w-100" onclick="handleDonateClick()" data-bs-toggle="modal" data-bs-target="#donateModal">
                            Donate Now
                        </button>  *@

                        @* <a href="javascript:void(0);"
                           onclick="checkLoginAndNavigate({
       url: '/Contributions/Donate?campaignId=@Model.CampaignId',
       title: 'Want to help this campaign?',
       text: 'Login or register to contribute and make a change.',
       btnText: 'Login to Donate'
   })"
                           class="btn btn-danger btn-lg w-100">
                            Donate Now
                        </a>
 *@
                        <button class="btn btn-danger btn-lg w-100" onclick="handleDonateClick()">
                            Donate Now
                        </button>

                    </div>
                    <p class="text-center text-muted mt-2">Card, Netbanking, UPI</p>
                    <hr />
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <ul class="nav nav-tabs" id="campaignTabs">
            <li class="nav-item">
                <a class="nav-link active" data-bs-toggle="tab" href="#story">Story</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-bs-toggle="tab" href="#documents">Documents</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-bs-toggle="tab" href="#updates">Updates</a>
            </li>
        </ul>
        <div class="tab-content p-3 border">
            <div class="tab-pane fade show active" id="story">
                <p>@Model.Description</p>
            </div>
            <div class="tab-pane fade" id="documents">
                <p>Document uploads coming soon...</p>
            </div>
            <div class="tab-pane fade" id="updates">
                <p>No updates yet...</p>
            </div>
        </div>
    </div>
</div>

<!-- Donation Modal -->
<div class="modal fade" id="donateModal" tabindex="-1" aria-labelledby="donateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="donateModalLabel">Contribute to @Model.Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="donationForm">
                    <input type="hidden" id="campaignId" value="@Model.CampaignId" />
                    <div class="mb-3">
                        <label for="amount" class="form-label">Enter Amount (INR)</label>
                        <input type="number" class="form-control" id="amount" name="amount" />
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Contribute</button>
                </form>
            </div>
        </div>
    </div>
</div>

@{
    var userId = Context.Session.GetInt32("UserId_ses");
}
<script>
    const isLoggedIn = "@(userId != null ? "true" : "false")";
</script>
<script>
    console.log("IsLoggedIn JS value: ", isLoggedIn);
</script>

@section Scripts {
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <!-- Toastr CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">

    <!-- Toastr JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <script src="~/authentication_t/app-assets/vendors/js/extensions/sweetalert2.all.min.js"></script>
    <script>

        // function handleDonateClick() {
        //     if (!isLoggedIn) {
        //         alert("Please login first to donate.");
        //         window.location.href = "/Account/Login"; // Adjust path as needed
        //     } else {
        //         const donateModal = new bootstrap.Modal(document.getElementById('donateModal'));
        //         donateModal.show();
        //     }
        // }
        // ================================
        // 🔥 Toastr Configuration
        // ================================
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };

        function handleDonateClick() {
            if (isLoggedIn === "true") {
                const donateModal = new bootstrap.Modal(document.getElementById('donateModal'));
                donateModal.show();
            } else {
                Swal.fire({
                    title: 'Please Login First',
                    text: 'Login or register to continue donating.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Login Now',
                    cancelButtonText: 'Maybe Later',
                    confirmButtonColor: '#198754',
                    cancelButtonColor: '#d33'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/Account/Login';
                    }
                });
            }
        }

        $("#donationForm").validate({
            rules: {
                amount: {
                    required: true,
                    min: 1
                }
            },
            messages: {
                amount: {
                    required: "Please enter an amount.",
                    min: "Amount must be at least ₹1."
                }
            },
            errorPlacement: function (error, element) {
                error.insertAfter(element); // Show message below the field
            }
        });

    document.getElementById("donationForm").addEventListener("submit", function (e) {
    e.preventDefault();

    const amount = parseFloat(document.getElementById("amount").value);
    const campaignId = parseInt(document.getElementById("campaignId").value);

    // if (isNaN(amount) || amount < 1) {
    //     toastr.error("Please enter a valid amount greater than or equal to ₹1.");
    //     return;
    // }
            if (!$(this).valid()) return;

    fetch(`/Contributions/CreateOrder`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            amount: amount,
            campaignId: campaignId
        })
    })
        .then(response => response.json())
        .then(order => {
            const options = {
                key: "rzp_test_lP7c4T9H5YGiXt", // Replace with key from config in production
                amount: order.amount,
                currency: "INR",
                name: "Crowd Funding",
                description: "Donation",
                order_id: order.id,
                prefill: {
                    name: "@ViewBag.UserName",
                    email: "@ViewBag.UserEmail",
                    contact: "9999999999" // Use test number
                },
                handler: function (response) {

                    // ✅ Close the donate modal
                    // const donateModal = bootstrap.Modal.getInstance(document.getElementById('donateModal'));
                    // donateModal.hide();

                     // ✅ Show loader
                    // Swal.fire({
                    //     title: 'Processing payment...',
                    //     html: '<img src="~/PaymentLoader1.gif" alt="Loading..."',
                    //     allowOutsideClick: false,
                    //     showConfirmButton: false,
                    // });

                            document.getElementById("loaderOverlay").style.display = "block";

                    fetch(`/Contributions/VerifyAndStorePayment`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature,
                            amount: amount,
                            campaignId: campaignId
                        })
                    })
                        .then(res => res.json())
                        // .then(result => {
                        //     alert(result.message);
                        //     window.location.reload();
                        // })
                        .then(result => {
                            if (result.success) {
                                toastr.success(result.message);
                                setTimeout(() => {
                                    // window.location.href = `/ManageCampaigns/DetailCampaignCases/${campaignId}`;
                                            window.location.reload();
                                }, 1500); // 1.5 second delay to show toastr
                            } else {
                                toastr.error(result.message);
                            }
                        })
                        .catch(error => {
                            console.error("Verification failed:", error);
                            toastr.error("Payment verification failed. Please try again.");
                            //alert("Payment verification failed. Please try again.");
                        });
                },
                theme: {
                    color: "#528FF0"
                }
            };
            const rzp = new Razorpay(options);
                  
            // Show loader and close modal before opening Razorpay
            //document.getElementById("loaderOverlay").style.display = "block";  // Show loader
            const modal = bootstrap.Modal.getInstance(document.getElementById('donateModal'));
            modal.hide();  // Close modal

            rzp.open();
        })
        .catch(error => {
            console.error("Order creation failed:", error);
            toastr.error("Failed to create payment order. Please try again.");
        });
});


        // function checkLoginAndNavigate({ url, title, text, btnText }) {

        //     var isLoggedIn = '@ViewBag.IsLoggedIn'.toLowerCase() === 'true';

        //     const isLoggedIn = sessionStorage.getItem("UserId_ses") || document.body.getAttribute('data-is-loggedin');

        //     if (isLoggedIn) {
        //         window.location.href = url;
        //     } else {
        //         Swal.fire({
        //             title: title || 'Hold on!',
        //             text: text || 'Please login or register to continue.',
        //             icon: 'info',
        //             showCancelButton: true,
        //             confirmButtonText: btnText || 'Login',
        //             cancelButtonText: 'Maybe later',
        //             confirmButtonColor: '#198754',
        //             cancelButtonColor: '#d33'
        //         }).then((result) => {
        //             if (result.isConfirmed) {
        //                 window.location.href = '/Account/Login';
        //             }
        //         });
        //     }
        // }

    </script>
}


@* 
@section Scripts {
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        document.getElementById("donationForm").addEventListener("submit", function (e) {
            e.preventDefault();

            const amount = document.getElementById("amount").value;
            const campaignId = document.getElementById("campaignId").value;

            fetch(`/Payment/CreateOrder?amount=${amount}&campaignId=${campaignId}`)
                .then(response => response.json())
                .then(order => {
                    const options = {
                        key: "rzp_test_lP7c4T9H5YGiXt", // Replace with actual key
                        amount: order.amount,
                        currency: "INR",
                        name: "Crowd Funding",
                        description: "Donation",
                        order_id: order.id,
                        handler: function (response) {
                            fetch(`/Payment/VerifyPayment`, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    amount: amount,
                                    campaignId: campaignId
                                })
                            })
                                .then(res => res.json())
                                .then(result => {
                                    alert(result.message);
                                    window.location.reload();
                                });
                        },
                        theme: {
                            color: "#528FF0"
                        }
                    };
                    const rzp = new Razorpay(options);
                    rzp.open();
                });
        });
    </script>
} *@
