@using X.PagedList
@using X.PagedList.Mvc.Core
@model IPagedList<Crowd_Funding_Platform.Models.Contribution>

@{
    ViewData["Title"] = "Contributors List";
    Layout = "~/Views/Shared/_dashboardLayout.cshtml";
}

<style>
    .search-container {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.07);
        margin-bottom: 25px;
    }

    /* .table-wrapper {
        background: #fff;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
    } */

    .table-wrapper {
        background: #fff;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
        overflow-x: auto; /* Enables horizontal scroll */
        max-width: 100%; /* Prevents overflow beyond card */
    }

    .custom-table th {
        background-color: #0d6efd;
        color: #ffffff;
        text-align: center;
        vertical-align: middle;
        border: none;
    }

    .custom-table td {
        vertical-align: middle;
        text-align: center;
    }

    .custom-table tbody tr:hover {
        background-color: #f8f9fa;
        transition: background 0.3s ease;
    }

    .badge {
        font-size: 0.85rem;
        padding: 5px 12px;
    }

    .contributor-avatar {
        width: 42px;
        height: 42px;
        object-fit: cover;
        border-radius: 50%;
    }

    .avatar-placeholder {
        width: 42px;
        height: 42px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #6c757d;
        color: white;
        font-weight: bold;
    }
</style>


<div class="export-buttons" style="    margin-top: -16px;
    margin-right: 17px;
}">
    <a asp-action="ExportContributorsListToExcel"
       asp-route-searchTerm="@ViewBag.searchString"     
       asp-route-ConDate="@ViewBag.ConDate"
       class="btn btn-outline-success"
       data-bs-toggle="tooltip" data-bs-placement="top" title="Export to Excel" style="background-color: #1bcfb4;
    color: white;">
        <i class="fas fa-file-excel"></i>
    </a>

    <a href="@Url.Action("ExportContributionsToPdf", "Contributions")"
       class="btn btn-outline-danger"
       data-bs-toggle="tooltip" data-bs-placement="top" title="Export to PDF" style="    background-color: #fe7c96;
    color: white;">
        <i class="fas fa-file-pdf"></i>
    </a>
</div>

<div class="container mt-4">
    @if (Model != null && Model.Any())
    {
        <div id="contributorsContainer">
            <div class="search-container row g-3 align-items-center" style="    margin-top: -34px;">
                <h2 class="mb-4 text-primary fw-bold" style="    margin-top: 1px; font-size: 22px;">🌟 All Contributors</h2>
                <div class="col-md-6">
                    <input type="text" id="searchInput" style="    margin-top: -28px;
    padding-block: 14px;" class="form-control rounded-pill shadow-sm" placeholder="🔍 Search by Contributor Name..." />
                </div>

                <div class="col-md-3">
                    <input type="date" id="ConDate" class="form-control rounded-pill shadow-sm" />
                </div>
               

                <div class="col-md-3">
                    <button type="button" class="btn btn-outline-danger reset-btn" onclick="resetFilters()">
                        <i class="fas fa-redo-alt"></i> Reset
                    </button>
                </div>

            </div>
            <div class="table-wrapper mt-4" id="contributorsTable">
                <table class="table table-bordered table-hover custom-table">
                    <thead class="text-center">
                        <tr>
                            <th>Contributor</th>
                            <th>Email</th>
                            <th>Phone</th>
                            
                            <th>Total Contributions</th>
                            <th>Date</th>
                            
                            <th>Payment Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center gap-2 justify-content-center">
                                        @if (!string.IsNullOrEmpty(item.Contributor.ProfilePicture))
                                        {
                                            <img src="@item.Contributor.ProfilePicture" alt="Profile" class="contributor-avatar" />
                                        }
                                        else
                                        {
                                            <div class="avatar-placeholder">
                                                @item.Contributor.Username?[0]
                                            </div>
                                        }
                                        <span class="fw-semibold">@item.Contributor.Username</span>
                                    </div>
                                </td>
                                <td>@item.Contributor?.Email</td>
                                <td>@item.Contributor?.PhoneNumber</td>
                               
                                <td class="text-info fw-bold">₹@item.TotalContribution</td>
                                <td>@(item.Date.HasValue ? item.Date.Value.ToString("dd MMM yyyy") : "-")</td>
                               
                                <td>
                                    @if (!string.IsNullOrEmpty(item.PaymentStatus))
                                    {
                                        <span class="badge @(item.PaymentStatus == "Success" ? "bg-success" : "bg-danger")">
                                            @item.PaymentStatus
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">-</span>
                                    }
                                </td>
                               @*  <td>
                                    <a href="@Url.Action("EachConributionsRecord", "Contributions", new { contributorId = item.ContributorId })" class="btn btn-primary btn-sm">
                                        View Campaigns
                                    </a>
                                </td> *@
                                <td class="text-center">
                                    <a href="@Url.Action("EachConributionsRecord", "Contributions", new { contributorId = item.ContributorId })" class="btn btn-sm btn-outline-primary" data-bs-toggle="tooltip" title="View Campaigns">
                                        <i class="fas fa-clipboard-list"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="d-flex justify-content-center mt-4">
                    @Html.PagedListPager(Model, page => Url.Action("ContributionsList", new
                    {
                        page,
                        searchString = ViewBag.CurrentFilter,
                            ConDate = ViewBag.DateFilter
                        //category = ViewBag.SelectedCategory
                    }),
                   new PagedListRenderOptions
                   {
                       DisplayLinkToFirstPage = PagedListDisplayMode.Always,
                       DisplayLinkToLastPage = PagedListDisplayMode.Always,
                       DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                       DisplayLinkToNextPage = PagedListDisplayMode.Always,
                       DisplayLinkToIndividualPages = true,
                       DisplayPageCountAndCurrentLocation = false,
                       MaximumPageNumbersToDisplay = 5,
                       LiElementClasses = new[] { "page-item" },
                       PageClasses = new[] { "page-link" }
                   })
                </div>
            </div>
        </div>

    }
    else
    {
        <div class="alert alert-info shadow-sm">
            No contributors found for this campaign.
        </div>
    }
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    @Html.Raw("<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js\"></script>")
   @*  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> *@
    <script>
        // Make fetchFilteredResults global
        function fetchFilteredResults() {
            const search = $("#searchInput").val();
            const Date = $("#ConDate").val();
            const url = `/Contributions/ContributionsList?searchString=${encodeURIComponent(search)}&ConDate=${Date}`;
            loadContributors(url);
        }

        // Load contributors via AJAX
        function loadContributors(url) {
            $.get(url, function (data) {
                const newContent = $(data).find("#contributorsTable").html();
                $("#contributorsTable").html(newContent);
            
                // Tooltip initialization (Bootstrap 5)
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            });

        }

        // Reset filters
        function resetFilters() {
            $("#searchInput").val('');
            $("#ConDate").val('');
            fetchFilteredResults();
        }

        // Tooltip initialization (Bootstrap 5)
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        $(document).ready(function () {
            // Debounce utility
            function debounce(func, delay) {
                let timer;
                return function () {
                    const context = this;
                    const args = arguments;
                    clearTimeout(timer);
                    timer = setTimeout(() => func.apply(context, args), delay);
                };
            }

            // Search input with debounce
            $("#searchInput").on("input", debounce(fetchFilteredResults, 500));

               // Trigger filtering when date is selected
            $("#ConDate").on("change", fetchFilteredResults);

            // Pagination click
            $(document).on("click", ".pagination a", function (e) {
                e.preventDefault();
                const url = $(this).attr("href");
                loadContributors(url);
            });
        });
    </script>

    
    
    @* <script>
        $(document).ready(function () {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });

            function fetchFilteredResults() {
                const search = $("#searchInput").val();
                const Date = $("#ConDate").val();
                const url = `/Contributions/ContributionsList?searchString=${encodeURIComponent(search)}&ConDate=${Date}`;
                loadContributors(url);
            }

            function resetFilters() {
                $("#searchInput").val('');
                $("#ConDate").val('');
                fetchFilteredResults();
            }
            // Debounce utility function
            function debounce(func, delay) {
                let timer;
                return function () {
                    const context = this;
                    const args = arguments;
                    clearTimeout(timer);
                    timer = setTimeout(() => func.apply(context, args), delay);
                };
            }

            function loadContributors(url) {
                $.get(url, function (data) {
                    const newContent = $(data).find("#contributorsTable").html();
                    $("#contributorsTable").html(newContent);
                });
            }

            

            // Use debounce on input filters
            $("#searchInput").on("input", debounce(fetchFilteredResults, 500));
            //$("#categoryInput").on("change", fetchFilteredResults); // dropdown doesn't need debounce

            // AJAX pagination click
            $(document).on("click", ".pagination a", function (e) {
                e.preventDefault();
                const url = $(this).attr("href");
                loadContributors(url);
            });
        });
       

       
    </script> *@
}
