@model Crowd_Funding_Platform.Models.CreatorDashboardVM
@{
    ViewData["Title"] = "Creator Dashboard";
    Layout = "~/Views/Shared/_dashboardLayout.cshtml";
}

<div class="container mt-4">
    <h2 class="mb-4">Welcome to Your Dashboard</h2>

    <div class="row">
        <!-- Total Campaigns -->
        <div class="col-md-4 mb-3">
            <div class="card bg-primary text-white shadow rounded-4">
                <div class="card-body">
                    <h5>Total Campaigns</h5>
                    <h3>@Model.TotalCampaigns</h3>
                </div>
            </div>
        </div>

        <!-- Active Campaigns -->
        <div class="col-md-4 mb-3">
            <div class="card bg-success text-white shadow rounded-4">
                <div class="card-body">
                    <h5>Active Campaigns</h5>
                    <h3>@Model.ActiveCampaigns</h3>
                </div>
            </div>
        </div>

        <!-- Completed Campaigns -->
        <div class="col-md-4 mb-3">
            <div class="card bg-info text-white shadow rounded-4">
                <div class="card-body">
                    <h5>Completed Campaigns</h5>
                    <h3>@Model.CompletedCampaigns</h3>
                </div>
            </div>
        </div>

        <!-- Total Raised Amount -->
        <div class="col-md-6 mb-3">
            <div class="card bg-warning text-dark shadow rounded-4">
                <div class="card-body">
                    <h5>Total Raised</h5>
                    <h3>₹@Model.TotalRaisedAmount.ToString("N2")</h3>
                </div>
            </div>
        </div>

        <!-- Total Contributors -->
        <div class="col-md-6 mb-3">
            <div class="card bg-secondary text-white shadow rounded-4">
                <div class="card-body">
                    <h5>Total Contributors</h5>
                    <h3>@Model.TotalContributors</h3>
                </div>
            </div>
        </div>
    </div>



    <div class="row mt-4">
        <!-- Campaign-wise Raised Amount -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-sm rounded-4">
                <div class="card-body">
                    <h5 class="card-title">Campaign-wise Raised Amount</h5>
                    <canvas id="campaignChart" height="200"></canvas>
                </div>
            </div>
        </div>

        <!-- Monthly Donation Trends -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-sm rounded-4">
                <div class="card-body">
                    <h5 class="card-title">Monthly Donation Trends</h5>
                    <canvas id="donationTrendChart" height="200"></canvas>
                </div>
            </div>
        </div>

        <!-- Campaign Status Overview -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-sm rounded-4">
                <div class="card-body">
                    <h5 class="card-title">Campaign Status Overview</h5>
                    <canvas id="campaignStatusChart" height="200"></canvas>
                </div>
            </div>
        </div>

        <!-- Campaign Insights -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-sm rounded-4">
                <div class="card-body">
                    <h5 class="card-title">Campaign Insights</h5>
                    <canvas id="campaignInsightsChart" height="220"></canvas>
                </div>
            </div>
        </div>
    </div>


</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const ctx = document.getElementById('campaignChart').getContext('2d');
        const campaignChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.ChartCampaigns.Select(c => c.Title))),
                datasets: [{
                    label: 'Raised Amount (₹)',
                    data: @Html.Raw(Json.Serialize(Model.ChartCampaigns.Select(c => c.RaisedAmount))),
                    backgroundColor: '#4e73df',
                    borderColor: '#4e73df',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function (value) {
                                return '₹' + value;
                            }
                        }
                    }
                }
            }
        });

        
        const trendCtx = document.getElementById('donationTrendChart').getContext('2d');
        const donationTrendChart = new Chart(trendCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.ContributionTrends.Select(c => c.Month))),
                datasets: [{
                    label: 'Total Donations (₹)',
                    data: @Html.Raw(Json.Serialize(Model.ContributionTrends.Select(c => c.TotalAmount))),
                    backgroundColor: 'rgba(78, 115, 223, 0.2)',
                    borderColor: '#4e73df',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.3
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: value => '₹' + value
                        }
                    }
                }
            }
        });

           
        const statusCtx = document.getElementById('campaignStatusChart').getContext('2d');
        const campaignStatusChart = new Chart(statusCtx, {
            type: 'doughnut',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.CampaignStatusCounts.Keys)),
                datasets: [{
                    label: 'Campaigns',
                    data: @Html.Raw(Json.Serialize(Model.CampaignStatusCounts.Values)),
                    backgroundColor: ['#1cc88a', '#f6c23e', '#e74a3b', '#36b9cc'],
                    borderColor: '#fff',
                    borderWidth: 2
                }]
            },
            options: {
                cutout: '60%',
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        

        const insightsCtx = document.getElementById('campaignInsightsChart').getContext('2d');
        const campaignInsightsChart = new Chart(insightsCtx, {
            type: 'radar',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.CampaignInsights.Select(c => c.CampaignTitle))),
                datasets: [
                    {
                        label: 'Avg Donation (₹)',
                        data: @Html.Raw(Json.Serialize(Model.CampaignInsights.Select(c => c.AvgDonation))),
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: '#4bc0c0',
                        borderWidth: 2
                    },
                    {
                        label: 'Raised (%)',
                        data: @Html.Raw(Json.Serialize(Model.CampaignInsights.Select(c => c.RaisedPercent))),
                        backgroundColor: 'rgba(255, 205, 86, 0.2)',
                        borderColor: '#ffcd56',
                        borderWidth: 2
                    }
                ]
            },
            options: {
                scales: {
                    r: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        position: 'top'
                    }
                }
            }
        });

    </script>
}
